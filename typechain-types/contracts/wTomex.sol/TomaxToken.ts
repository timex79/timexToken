/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TomaxTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INITIAL_CIRCULATING_SUPPLY"
      | "REQUIRED_APPROVALS"
      | "TOTAL_SUPPLY"
      | "allowance"
      | "approvals"
      | "approve"
      | "approveRequest"
      | "approveRequestForOwnerChange"
      | "approveRequestForWithdrawals"
      | "approveWithdraw"
      | "balanceOf"
      | "changeOwner"
      | "changeSuperAdmin"
      | "currentYear"
      | "decimals"
      | "foreignTokenRecover"
      | "isOwner"
      | "lockedSupply"
      | "name"
      | "owners"
      | "pause"
      | "paused"
      | "releasePercentage"
      | "releaseTokens"
      | "superAdmin"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "unwrap"
      | "wrap"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "OwnerApproved"
      | "SuperAdminChanged"
      | "TokensReleased"
      | "Transfer"
      | "Unwrapped"
      | "Wrapped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_CIRCULATING_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_APPROVALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvals",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequestForOwnerChange",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequestForWithdrawals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentYear",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "foreignTokenRecover",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wrap", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_CIRCULATING_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_APPROVALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRequestForOwnerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRequestForWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenRecover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerApprovedEvent {
  export type InputTuple = [owner: AddressLike, requestHash: BytesLike];
  export type OutputTuple = [owner: string, requestHash: string];
  export interface OutputObject {
    owner: string;
    requestHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperAdminChangedEvent {
  export type InputTuple = [
    oldSuperAdmin: AddressLike,
    newSuperAdmin: AddressLike
  ];
  export type OutputTuple = [oldSuperAdmin: string, newSuperAdmin: string];
  export interface OutputObject {
    oldSuperAdmin: string;
    newSuperAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReleasedEvent {
  export type InputTuple = [
    year: BigNumberish,
    amountReleased: BigNumberish,
    remainingLockedSupply: BigNumberish
  ];
  export type OutputTuple = [
    year: bigint,
    amountReleased: bigint,
    remainingLockedSupply: bigint
  ];
  export interface OutputObject {
    year: bigint;
    amountReleased: bigint;
    remainingLockedSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnwrappedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TomaxToken extends BaseContract {
  connect(runner?: ContractRunner | null): TomaxToken;
  waitForDeployment(): Promise<this>;

  interface: TomaxTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INITIAL_CIRCULATING_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  REQUIRED_APPROVALS: TypedContractMethod<[], [bigint], "view">;

  TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approvals: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveRequest: TypedContractMethod<
    [functionName: string],
    [void],
    "nonpayable"
  >;

  approveRequestForOwnerChange: TypedContractMethod<
    [functionName: string, ownerToRemove: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  approveRequestForWithdrawals: TypedContractMethod<
    [functionName: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  changeOwner: TypedContractMethod<
    [ownerToRemove: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  changeSuperAdmin: TypedContractMethod<
    [newSuperAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  currentYear: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  foreignTokenRecover: TypedContractMethod<
    [_tokenAddr: AddressLike, _recoverAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lockedSupply: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  releasePercentage: TypedContractMethod<[], [bigint], "view">;

  releaseTokens: TypedContractMethod<[], [void], "nonpayable">;

  superAdmin: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unwrap: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  wrap: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INITIAL_CIRCULATING_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REQUIRED_APPROVALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approvals"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveRequest"
  ): TypedContractMethod<[functionName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveRequestForOwnerChange"
  ): TypedContractMethod<
    [functionName: string, ownerToRemove: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveRequestForWithdrawals"
  ): TypedContractMethod<
    [functionName: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<
    [ownerToRemove: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeSuperAdmin"
  ): TypedContractMethod<[newSuperAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foreignTokenRecover"
  ): TypedContractMethod<
    [_tokenAddr: AddressLike, _recoverAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "releasePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "superAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unwrap"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrap"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnerApproved"
  ): TypedContractEvent<
    OwnerApprovedEvent.InputTuple,
    OwnerApprovedEvent.OutputTuple,
    OwnerApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SuperAdminChanged"
  ): TypedContractEvent<
    SuperAdminChangedEvent.InputTuple,
    SuperAdminChangedEvent.OutputTuple,
    SuperAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokensReleased"
  ): TypedContractEvent<
    TokensReleasedEvent.InputTuple,
    TokensReleasedEvent.OutputTuple,
    TokensReleasedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unwrapped"
  ): TypedContractEvent<
    UnwrappedEvent.InputTuple,
    UnwrappedEvent.OutputTuple,
    UnwrappedEvent.OutputObject
  >;
  getEvent(
    key: "Wrapped"
  ): TypedContractEvent<
    WrappedEvent.InputTuple,
    WrappedEvent.OutputTuple,
    WrappedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OwnerApproved(address,bytes32)": TypedContractEvent<
      OwnerApprovedEvent.InputTuple,
      OwnerApprovedEvent.OutputTuple,
      OwnerApprovedEvent.OutputObject
    >;
    OwnerApproved: TypedContractEvent<
      OwnerApprovedEvent.InputTuple,
      OwnerApprovedEvent.OutputTuple,
      OwnerApprovedEvent.OutputObject
    >;

    "SuperAdminChanged(address,address)": TypedContractEvent<
      SuperAdminChangedEvent.InputTuple,
      SuperAdminChangedEvent.OutputTuple,
      SuperAdminChangedEvent.OutputObject
    >;
    SuperAdminChanged: TypedContractEvent<
      SuperAdminChangedEvent.InputTuple,
      SuperAdminChangedEvent.OutputTuple,
      SuperAdminChangedEvent.OutputObject
    >;

    "TokensReleased(uint256,uint256,uint256)": TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;
    TokensReleased: TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unwrapped(address,uint256)": TypedContractEvent<
      UnwrappedEvent.InputTuple,
      UnwrappedEvent.OutputTuple,
      UnwrappedEvent.OutputObject
    >;
    Unwrapped: TypedContractEvent<
      UnwrappedEvent.InputTuple,
      UnwrappedEvent.OutputTuple,
      UnwrappedEvent.OutputObject
    >;

    "Wrapped(address,uint256)": TypedContractEvent<
      WrappedEvent.InputTuple,
      WrappedEvent.OutputTuple,
      WrappedEvent.OutputObject
    >;
    Wrapped: TypedContractEvent<
      WrappedEvent.InputTuple,
      WrappedEvent.OutputTuple,
      WrappedEvent.OutputObject
    >;
  };
}
